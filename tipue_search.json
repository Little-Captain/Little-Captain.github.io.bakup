{
    "pages": [
        {
            "title": "Lean Python(Chapter 11)", 
            "text":"Databases SQLite 数据库函数 # 打开连接数据库 conn = sqlite3.connect(filename) # 执行 SQL conn.executescript(sql) # 返回游标 cursor = conn.cursor() # 执行查询操作, 返回数据 cursor.execute(sql) rows = cursor.fetchall() 连接和导入数据 (SQLite) # insert import os import sqlite3 db_filename=&#39;mydatabase.db&#39; exists = os.path.exists(db_filename) if exists: os.unlink(db_filename) conn = sqlite3.connect(db_filename) schema=&#34;&#34;&#34;create table person ( id integer primary key autoincrement not null, name text not null, dob date, nationality text, gender text) &#34;&#34;&#34; conn.executescript(schema) people=&#34;&#34;&#34;insert into person (name, dob, nationality, gender) values (&#39;Fred Bloggs&#39;, &#39;1965-12-25&#39;,&#39;British&#39;,&#39;Male&#39;); insert into person (name, dob,nationality,gender) values (&#39;Santa Claus&#39;, &#39;968-01-01&#39;,&#39;Lap&#39;,&#39;Male&#39;); insert into person (name, dob,nationality,gender) values (&#39;Tooth Fairy&#39;, &#39;1931-03-31&#39;,&#39;American&#39;,&#39;Female&#39;); &#34;&#34;&#34; conn.executescript(people) cursor = conn.cursor() cursor.execute(&#34;select id, name, dob, nationality, gender from person&#34;) for row in cursor.fetchall(): id, name, dob, nationality, gender = row print(&#34;%3d %15s %12s %10s %6s&#34; % (id, name, dob, nationality, gender)) # 省略了 name 字段, 使其抛出一个异常 try: dupe=&#34;insert into person (id, dob,nationality,gender) \ values (1,&#39;1931-03-31&#39;,&#39;American&#39;,&#39;Female&#39;);&#34; conn.executescript(dupe) except Exception as e: print(&#39;Cannot insert record&#39;,e.__class__.__name__) # update import sqlite3 import sys db_filename = &#39;mydatabase.db&#39; inid = sys.argv[1] innat = sys.argv[2] conn = sqlite3.connect(db_filename) cursor = conn.cursor() query = &#34;update person set nationality = :nat where id = :id&#34; cursor.execute(query, {&#39;id&#39;:inid, &#39;nat&#39;:innat}) cursor.execute(&#34;select id, name, dob,nationality,gender from person&#34;) for row in cursor.fetchall(): id, name, dob, nationality, gender = row print(&#34;%3d %15s %12s %10s %6s&#34; % (id, name, dob, nationality, gender))", 
            "tags": "Python", 
            "loc": "http://littlecaptain.net/lean-pythonchapter-11.html"
        },
        {
            "title": "Lean Python(Chapter 10)", 
            "text":"字符串搜索 find 返回字符串出现的字符位置, 如果没有找到就返回 -1 txt=&#34;The quick brown fox jumps over the lazy dog&#34; txt.find(&#39;jump&#39;) txt.find(&#39;z&#39;) txt.find(&#39;green&#39;) 正则表达式 # 匹配邮箱 import re regex = &#39;\s[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}[\s]&#39; text = &#34;&#34;&#34;This is some text with x@y.z embedded e-mails that we&#39;ll use as@example.com some lines have no email addresses others@have.two valid email@address.com The re module is awonderful@thing.&#34;&#34;&#34; print(&#39;** Search text ***\n&#39;+text) print(&#39;** Regex ***\n&#39; + regex + &#39;\n***&#39;) utext = text.upper() s = re.search(regex, utext) if s: print(&#39;*** At least one email found &#34;&#39; + s.group() + &#39;&#34;&#39;) m = re.findall(regex, utext) if m: for match in m: print(&#39;Match found&#39;, match.strip()) 捕获括号 # 找出 html 中的 links import urllib.request import re response = urllib.request.urlopen(&#39;http://leanpy.com&#39;) data1 = str(response.read()) regex = &#39;&lt;a\s[^&gt;]*href\s*=\s*\&#34;([^\&#34;]*)\&#34;[^&gt;]*&gt;(.*?)&lt;/a&gt;&#39; pm = re.compile(regex) matches = pm.findall(data1) for m in matches: ms=&#39;&#39;.join((&#39;Link: &#34;&#39;,m[0],&#39;&#34; Text: &#34;&#39;,m[1],&#39;&#34;&#39;)) print(ms)", 
            "tags": "Python", 
            "loc": "http://littlecaptain.net/lean-pythonchapter-10.html"
        },
        {
            "title": "Lean Python(Chapter 09)", 
            "text":"Accessing the Web import requests from urllib.parse import urlparse url = input(&#39;Web url to fetch:&#39;) urlparts = urlparse(url) if urlparts[0] == &#39;&#39;: url = &#39;&#39;.join((&#39;http://&#39;, url)) qstring = input(&#39;Enter query string:&#39;) if len(qstring) &gt; 0: url = &#39;?&#39;.join((url, qstring)) save = input(&#39;Save downloaded page to disk [y/n]?&#39;) print(&#39;Requesting&#39;, url) try: response = requests.get(url) if save.lower() == &#39;y&#39;: geturl = response.url urlparts = urlparse(geturl) netloc = urlparts[1] if len(netloc) == 0: fname = &#39;save.html&#39; else: fname = &#39;.&#39;.join((netloc, &#39;html&#39;)) print(&#39;Saving to&#39;, fname, &#39;...&#39;) fp = open(fname, &#39;w&#39;, encoding=&#39;utf8&#39;) fp.write(response.text) fp.close() else: print(response.text) except Exception as e: print(e.__class__.__name__, e)", 
            "tags": "Python", 
            "loc": "http://littlecaptain.net/lean-pythonchapter-09.html"
        },
        {
            "title": "Lean Python(Chapter 08)", 
            "text":"Testing Your Code 模块化编程与代码测试 模块化编程是测试更为容易 测试驱动的开发(TDD) 开发代码前先写测试 运行测试, 观察失败, 然后添加和修正代码, 使测试通过 当测试通过后, 寻求改进代码设计的机会 对于大型项目, TDD 能够最好的模块化你的代码 单元测试框架 : unittest def calc(a, op, b): if op not in &#39;+-/*&#39;: return None, &#39;Operator must be +-/*&#39; try: if op == &#39;+&#39;: result = a + b elif op == &#39;-&#39;: result = a - b elif op == &#39;/&#39;: result = a / b else: result = a * b except Exception as e: return None,e.__class__.__name__ return result,str(result) import unittest import calc class testCalc(unittest.TestCase): def testSimpleAdd(self): result, msg = calc.calc(1, &#39;+&#39;, 1) self.assertEqual(result, 2.0) def testLargeProduct(self): result, msg = calc.calc(123456789.0, &#39;*&#39;, 987654321.0) self.assertEqual(result, 1.2193263111263526e+17) def testDivByZero(self): result, msg = calc.calc(6, &#39;/&#39;, 0.0) self.assertEqual(msg, &#39;ZeroDivisionError&#39;) # 创建 test suite TestSuite = unittest.TestSuite() # 添加 test 到 suite 中 TestSuite.addTest(testCalc(&#34;testSimpleAdd&#34;)) TestSuite.addTest(testCalc(&#34;testLargeProduct&#34;)) TestSuite.addTest(testCalc(&#34;testDivByZero&#34;)) # 创建 Test runner runner = unittest.TextTestRunner() # 执行测试 runner.run(TestSuite)", 
            "tags": "Python", 
            "loc": "http://littlecaptain.net/lean-pythonchapter-08.html"
        },
        {
            "title": "Lean Python(Chapter 07)", 
            "text":"Exception and Error Handling 异常和错误的处理 print(&#39;Input two numbers. the first will be divided by the second&#39;) afirst = input(&#39;first number:&#39;) first=float(afirst) asecond = input(&#39;second number:&#39;) second = float(asecond) quotient = first / second print(&#39;Quotient first/second = &#39;,quotient) print(&#39;Input two numbers. the first will be divided by the second&#39;) afirst = input(&#39;first number:&#39;) asecond = input(&#39;second number:&#39;) try: first=float(afirst) second = float(asecond) quotient = first / second print(&#39;Quotient 1st/2nd = &#39;, quotient) except Exception as diag: print(diag.__class__.__name__, &#39;:&#39;, diag) Exception 是一个针对异常的顶层类, 所以它可以捕获所有的错误", 
            "tags": "Python", 
            "loc": "http://littlecaptain.net/lean-pythonchapter-07.html"
        },
        {
            "title": "Lean Python(Chapter 06)", 
            "text":"Object Orientation 创建对象 类的定义 类是对象的模板 from datetime import datetime class person(object): &#34;Person Class&#34; def __init__(self, name, age, parent = None): self.name =name self.age = age self.created = datetime.today() self.parent = parent self.children = [] print(&#39;Created&#39;, self.name, &#39;age&#39;, self.age) def setName(self, name): self.name = name print(&#39;Updated name&#39;, self.name) def setAge(self, age): self.age = age print(&#39;Update age&#39;, self.age) def addChild(self, name, age): child = person(name, age, parent = self) self.children.append(child) print(self.name, &#39;added child&#39;, child.name) def listChildren(self): if len(self.children) &gt; 0: print(self.name, &#39;has children:&#39;) for c in self.children: print(&#39; &#39;, c.name) else: print(self.name, &#39;has no children&#39;) def getChildren(self): return self.children from people import person joe = person(&#39;Joe Bloggs&#39;, 47) print(&#34;Joe&#39;s age is &#34;, joe.age) print(&#34;Joe&#39;s full name is &#34;, joe.name) joe.addChild(&#39;Dick&#39;,7) joe.addChild(&#39;Dora&#39;,9) joe.listChildren() joekids=joe.getChildren() print(&#34;** Joe&#39;s attributes **&#34;) print(vars(joe)) print(&#34;** Joe&#39;s Children **&#34;) for j in joekids: print(j.name,&#39;attributes&#39;) print(vars(j))", 
            "tags": "Python", 
            "loc": "http://littlecaptain.net/lean-pythonchapter-06.html"
        },
        {
            "title": "Lean Python(Chapter 05)", 
            "text":"Module 导入模块 一个文件就是一个模块, 模块名就是文件名 # as 使用自定义的名字引用这个模块 import modulename [as name] # 从模块中引入指定的函数、类、变量等 from module import function1, function2... # 从模块中引入所有的内容, 这时直接使用, 而不需要使用 . 引用 from module import * 注意 : 通常, 导入模块的需要内容和功能, 而要避免使用 import * Python 自带模块 查看 Python 环境 Path import sys sys.path", 
            "tags": "Python", 
            "loc": "http://littlecaptain.net/lean-pythonchapter-05.html"
        },
        {
            "title": "Lean Python(Chapter 04)", 
            "text":"Input and Output 显示输出 # 格式 print(arg1,arg2,arg3...,sep=&#39; &#39;,end=&#39;\n&#39;) 使用格式输出 print(&#39;%d plus %d makes %d&#39; % (3, 7, 10)) 抑制最后的空行输出 print(&#39;one...&#39;,&#39;two...&#39;,&#39;three&#39;,end=&#39;&#39;) 获取用户输入 yourName=input(&#39;Enter your name: &#39;) 接收的输入都是字符串, 所以要用户输入数字等需要自行解析 count = input(&#39;Enter a number: &#39;) if len(count) &gt; 0: if count.isdigit(): count = int(count) print(count++) 读写文件 打开文件 fileobj = open(filename, mode) mode 打开模式 文件存在 文件不存在 &#39;r&#39; 打开, 只读 不存在文件或目录, 报错 &#39;w&#39; 打开, 写入(覆盖) 创建, 写入 &#39;a&#39; 打开, 写入(追加) 创建, 写入 fname = &#39;myfile.txt&#39; fp = open(fname, &#39;r&#39;) fp = open(fname, &#39;w&#39;) fp = open(fname, &#39;a&#39;) 关闭文件 一旦你完成文件操作, 就应该关闭文件 文件的 open 和 close 操作, 总是成对使用 import os fp = open(fname,&#39;w&#39;) # do something fp.close() 读取文件 read() 以字符串的形式读取文件的全部内容 可以将读取的内容以换行符(&#39;\n&#39;)进行分隔 fp = open(fname, &#39;r&#39;) text = fp.read() lines = text.split(&#39;\n&#39;) fp.close() readlines() 返回一个 list , list 的元素就是每行的字符串 fp = open(fname, &#39;r&#39;) lines = fp.readlines() # 每行包含换行符&#39;\n&#39; fp.close() fp = open(fname, &#39;r&#39;) # 去掉了右边的空白字符 lines = [line.rstrip() for line in fp.readlines()] fp.close() 使用文件对象自带的迭代器逐行读取文件内容 fp = open(fname,&#39;r&#39;) for eachLine in fp: print(eachLine, end = &#39;&#39;) fp.close() 写入文件 标准写入函数 write() write() 函数, 不主动添加任何换行符 fp.write(textline) fp = open(&#39;text.txt&#39;,&#39;w&#39;) while True: text = input(&#39;Enter text (end with blank):&#39;) if len(text)==0: break else: fp.write(text+&#39;\n&#39;) fp.close() lines=[&#39;line 1&#39;,&#39;line 2&#39;,&#39;line 3&#39;,&#39;line 4&#39;] # write all lines with no &#39;\n&#39; fp.writelines(lines) # writes all line with &#39;\n&#39; fp.writelines([line+&#39;\n&#39; for line in lines]) 注意 : write() 和 writelines() 函数都不会在字符串末尾添加换行符(\n), 你必须自己添加 访问文件系统 os 模块中的一些常用函数 import os # remove a file (deleteme.txt) from disk os.unlink(&#39;deleteme.txt&#39;) # rename file on disk (from file.txt to newname.txt) os.rename(&#39;file.txt&#39;,&#39;newname.txt&#39;) # change current/working directory os.chdir(newdirectory) # create list of files in a directory filelist = os.listdir(dirname) # obtain current directory curdir = os.getcwd() # create a directory os.mkdir(dirname) # remove a directory (requires it to be empty) os.rmdir(dirname) # in the following examples, we need to use # the os.path module # # does the file/directory exist? exists = os.path.exists(path) # does path name exist and(且) is it a file? isfile = os.path.isfile(filepathname) # does path name exist and(且) is it is directory? isdir = os.path.isdir(filepath) 命令行参数 python mycopy.py thisfile.txt thatfile.txt 如何捕获命令行参数 import sys nargs=len(sys.argv) # sys.argv is List print(&#39;%d argument(s)&#39; % (nargs)) n=0 for a in sys.argv: print(&#39; arg %d is %s&#39; % (n, a)) n+=1 注意 : 第一参数总是程序的名字", 
            "tags": "Python", 
            "loc": "http://littlecaptain.net/lean-pythonchapter-04.html"
        },
        {
            "title": "Lean Python(Chapter 03)", 
            "text":"Program Structure 做决定 if 语句 if test: statement1 # 如果条件为真, 这三条语句都将执行 statement2 statement3 # if else if test: DoThis() else: DoThat() # if elif else if test1: DoThis() elif test2: DoThat() else: DoOther() 同一语句中的 if elif else 的缩进必须保持一致 pass 语句 pass 语句就是什么都不做 if test1: DoThis() elif test2: DoThat() # else 不是严格必须, 但是加上, 通过使用 pass 语句, 表明这时什么都不做, 语义更明确 else: pass 常见的测试条件 比较 var1 &gt; var2 序列的成员所属关系 var in seq var not in seq 序列长度 len(x)&gt;0 布尔值 fileopen # fileopen == True ? 变量是否有值 var # not None (or zero or &#39;&#39;) 校验 var.isalpha() # alphanumeric ? 计算结果比较 (price * quantity) &gt; 100.0 # cost &gt; 100? 逻辑操作符: and or not 可以用来连接条件构成复合条件 嵌套的条件表达式, 通过缩进区分层级 if age&gt;19: if carValue&gt;10000: if gotConvictions: rejectInsuranceApplication() 循环和迭代 for 循环 迭代一个集合中的每个元素 theTeam=[&#39;Julia&#39;,&#39;Jane&#39;,&#39;Tom&#39;,&#39;Dick&#39;,&#39;Harry&#39;] for person in theTeam: print(&#39;%s is in the team&#39; % person) # for 循环的通用格式为 for var in seq: range(10) # [0, 1, 2, ... , 9] range(1, 10) # [1, 2, ... , 9], 不包括 10 range(1, 20, 3) # 1 开始, 20 结束(不包括), 3 为步长 # 不想遍历序列, 只是想执行指定的代码指定的次数 for i in range(3): while 循环 重复执行循环直到测试失败 n = 4 while n &gt; 0: print(n) n -= 1 break 语句 终止循环, 执行循环后的语句 while True: command=input(&#39;Enter command:&#39;) if command==&#39;exit&#39;: break else: print(command) print(&#39;bye&#39;) continue 语句 跳过本次循环的后续代码, 直接进行下次循环 while True: command=input(&#39;Enter command:&#39;) if len(command)==0: continue elif command==&#39;exit&#39;: print(&#39;Goodbye&#39;) break else: print(command) print(&#39;bye&#39;) List Comprehensions (列表推导式、列表解析) # 普通方法 squares=[] for i in range(1,11): squares.append(i*i) # 列表推导式 squares=[i*i for i in range(1,11)] # 具体语法 [expr for element in iterable if condition] # if 语句用于从 iterable 中选择元素 # 例子 evens = [i for i in range(1,100) if not i % 2] trulines = [l for l in lines if l.find(&#39;True&#39;)&gt;-1] 使用函数 函数是什么 一个函数是一个代码片段 # 关键字 def 用于定义一个新函数 def lenDictList(seq): if type(seq) not in [list,dict]: return -1 nelems = 0 for elem in seq: nelems += 1 return nelems # 调用实例 l = [1,2,3,4,5] d = {1:&#39;one&#39;,2:&#39;two&#39;,3:&#39;three&#39;} lenDictList(l) lenDictList(d) lenDictList(34) 返回值 return return True return False return r1, r2, r3 return dict(a = v1, b = v2) 调用函数 # 左边变量的个数必须和右边函数的返回值个数匹配 count = len(seq) max, min, average = analyse(numlist) fee = calculateFee(hours, rate, taxfactor) 调用时给参数指定名字 指定名字的参数必须全部位于未指定名字的参数之后 自定名字的参数是关键字参数, 没有指定名字的参数是位置参数. 关键字参数必须位于位置参数之后 def fn(a, b, c=1.0): return a*b*c fn(1,2,3) fn(1,2) fn(1,b=2) fn(a=1,b=2,c=3) fn(1,b=2,3) # 错误!!! positional argument follows keyword argument 变量作用域 sharedvar = &#34;I&#39;m sharable&#34; def first(): print(sharedvar) firstvar = &#39;Not shared&#39; return def second(): print(sharedvar) print(firstvar) # error return", 
            "tags": "Python", 
            "loc": "http://littlecaptain.net/lean-pythonchapter-03.html"
        },
        {
            "title": "Lean Python(Chapter 02)", 
            "text":"Everything is Object 对象类型 # 使用 type 查看对象类型 type(23) 类型有 : int str list class function file bool(True、False) NoneType(None) long 工厂方法 int(4.0) str(4) list(1, 2, 3, 4) tuple(1, 2, 3, 4) dict(one = 1, two = 2) 数 12345678901234567890 1 / 7.0 x = 1E20 int(x/7.0) 算数操作 2 + 3 2.0 + 3 3 - 2 3.0 - 2 3 * 2 3 * 2.0 3.0 * 2.0 3 / 2 # 除法总是产生浮点数 -6 / 2 15 % 4 # int 3 4 ** 3 -4 ** 3 4 ** -3 转换函数 int(1.234) int(-1.234) long(1.234) long(-1.234) long(&#39;1234&#39;) long(&#39;1.234&#39;) long(float(&#39;1.234&#39;)) float(4) float(&#39;4.321&#39;) 布尔值 # 非零即真 bool(&#39;any text&#39;) # True bool(&#39;&#39;) # False bool([]) # False 随机数 import random # 产生 [a, b] 间的 int 数 random.randint(a,b) # 产生 [0.0 1.0] 间的浮点数 random.random() 序列 : 字符串、列表、元组 一组字符的序列 一组值的序列 一组值的序列, 和列表很相似, 但是元组内的实体不可改变 存取 可以从前遍历序列, 也可从后遍历序列 # 从前 x[0] ... x[n-1] # 从后 x[-1] ... x[-n] 成员关系 &#39;a&#39; in &#39;track&#39; # True 9 in [1,2,3,4,5,6] # False &#39;x&#39; not in &#39;next&#39; # False &#39;red&#39; not in [&#39;tan&#39;,&#39;pink&#39;] # True 连接操作 : + sequence1 + sequence2 &#39;mr&#39; + &#39;joe&#39; + &#39;soap&#39; # join() 函数在处理字符串和元组的连接时比较高效, 推荐使用 &#39;-&#39;.join((&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;)) 元素和切片 slice 访问格式 [startindex:endindex], 包括 startindex 的元素, 而不包括 endindex 的元素 [:endindex] 从 0 开始 [startindex:] 到 末尾 结束 mylist = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;] mylist[0] # &#39;a&#39; mylist[1:3] # [&#39;b&#39;, &#39;c&#39;] mylist = [1, 2, 3, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5] # 使用多重索引访问嵌套的序列 mylist[3][1] # &#39;b&#39; 序列内建函数 mylist = [4, 5, 6, 7, 1, 2, 3] len(mylist) max(mylist) min(mylist) 字符串 字符串不可变 mystr = &#39;Paddington Station&#39; mystr=mystr.upper() 赋值, 字符串成对使用 &#39; 或 &#34; 来包裹. 你可以在一对中使用另一对 text = &#39;Paul said, &#34;Hello World!&#34;&#39; print(text) 访问子串 text=&#39;Paul said, &#34;Hi&#34;&#39; text[:4] text[-4:] text[5:9] text[0:4] + text[12:14] 字符串比较 &#39;mcr&#39;&gt;&#39;liv&#39; &#39;X&#39;&gt;&#39;t&#39; 子串搜索 &#39;a&#39; in &#39;the task&#39; # True &#39;as&#39; in &#39;the task&#39; # True 特殊字符和转义符 \0 # Null character \t # Horizontal tab \n # Newline character \&#39; # Single quote \&#34; # Double quote \\ # Backslash 包裹多行 &#34;&#34;&#34; multiline=&#34;&#34;&#34;Line1 Line 2 Line 3&#34;&#34;&#34; 字符串的格式化 # % 操作符提供了字符串格式化功能, 结构如下 formatstring % (arguments to format) # formatstring 包含 %标记的占位符 %c # 单字符或只有一个字符的字符串 %s # 字符串 %d # 整数 %f # 浮点数 %% # 百分号 ntoys = 4 myname=&#39;Fred&#39; &#39;%s has %d toys&#39; % (myname,ntoys) # &#39;Fred has 4 toys&#39; 字符串函数 # 字符串函数都返回一个新字符串, 因为字符串不可变 find() # 查找文本 isalpha() # 判断是否是字母 isdigit() # 判断是否是数字 join() # 连接 upper() # 转换为大写 lower() # 转换为小写 split() # 将字符串分离为 list replace() # 替换字符 rstrip() # 移除右边的空白字符 lstrip() # 移除左边的空白字符 strip() # 移除左右两边的空白字符 列表 创建 mylist = [] names=[&#39;Tom&#39;,&#39;Dick&#39;,&#39;Harry&#39;] mixedlist = [1,2,3,&#39;four&#39;] # 混合 elist = [1,2,3,[4,5,6]] # 嵌套 names[1] # &#39;Dick&#39; elist[3][1] # 5 # 如果访问不存在的 index, 会产生一个 list index 越界错误 修改 mylist = [] # append 追加 mylist.append(&#39;Tom&#39;) mylist.append(&#39;Dick&#39;) mylist.append(&#39;Harry&#39;) # 改变值 mylist[1]=&#39;Bill&#39; # 删除 del mylist[1] # # [&#39;Tom&#39;,&#39;Harry&#39;] 获取索引 mylist=[&#39;Tom&#39;,&#39;Dick&#39;,&#39;Harry&#39;] mylist.index(&#39;Dick&#39;) # 1 mylist.index(&#39;Henry&#39;) # 不存在, 抛出错误 序列操作和相关函数 len、max、min、sum、sorted、reversed 元组 不可变, 这是和列表相比最大的区别 创建 mynumbers = (1,2,3,4,5,6,7) months=(&#39;Jan&#39;,&#39;Feb&#39;,&#39;Mar&#39;,&#39;Apr&#39;,&#39;May&#39;,&#39;Jun&#39;,&#39;Jul&#39;,&#39;Aug&#39;,&#39;Sep&#39;,&#39;Oct&#39;,&#39;Nov&#39;,&#39;Dec&#39;) mixed = (&#39;a&#39;,123,&#39;some text&#39;,[1,2,3,&#39;testing&#39;]) 访问 mynumbers[3] months[3:6] mixed[2]+&#39; &#39;+mixed[3][3] # 访问一个不存在的 index, 同样会抛出 index 越界的错误 序列操作和相关函数 len、max、min、sum、sorted、reversed 字典 创建 wdays={ &#39;M&#39;:&#39;Monday&#39;, &#39;T&#39;:&#39;Tuesday&#39;, &#39;W&#39;:&#39;Wednesday&#39;, &#39;Th&#39;:&#39;Thursday&#39;, &#39;F&#39;:&#39;Friday&#39;, &#39;Sa&#39;:&#39;Saturday&#39;, &#39;Su&#39;:&#39;Sunday&#39; } wdays[&#39;M&#39;] wdays[&#39;W&#39;] wdays[&#39;Su&#39;] newdict = {} # 空字典 修改 newdict = {} # 添加 newdict[&#39;1st&#39;] = &#39;first entry&#39; newdict[&#39;2nd&#39;] = &#39;second entry&#39; # 修改 newdict[&#39;1st&#39;] = &#39;new value&#39; # 删除 del newdict[&#39;2nd&#39;] # 长度 len(newdict) 操作, 特殊的有用操作 # 判断 key 是否存在 &#39;Sa&#39; in wdays # 通过 keys 创建 List wdays.keys() # 通过 values 创建一个可递归的 List wdays.values() # 查找 values, 没找到使用默认值 wdays.get(&#39;X&#39;,&#39;Not a day&#39;)", 
            "tags": "Python", 
            "loc": "http://littlecaptain.net/lean-pythonchapter-02.html"
        },
        {
            "title": "Lean Python(Chapter 01)", 
            "text":"Foundation 解释器 交互模式 dir : 列出一个对象的所有属性 dir(print) help : 查看内建关键字和方法的帮助文档 help(open) 命令行模式 通过在命令行中加载 python 程序执行 python myprogram.py 注释、代码块、缩进 使用 # 进行注释 使用相同的缩进区分代码块 : 用在 if、elif、else、while、for、函数定义中, 区分首行和下面的具体代码块, 具体代码块需要缩进 使用 \ 连接多行代码 变量 赋值 var = expression var1, var2, var3 = expression a = b = c = 1 关键字 and class elif finally if lambda print while as assert break continue def del else except exec for from global import in is not or pass raise return try with yield 内建名字 True False all any dir eval float format max min open print round set tuple type None abs chr dict exit file input int next object quit range str sum vars zip 特殊标识符 # 形式 _xxx __xxx__ __xxx 例如: __name__ 代表模块名 模块 导入模块 import mymodule 典型的程序结构 # 自定 python 的位置 #!/usr/local/bin/python3.6 # 引入模块, 说明模块功能 from datetime import datetime # 创建全局变量 now = datetime.now(); # 首先定义类, 其他引入这个模块的代码可以使用 class bookClass(object): &#34;Book object&#34; def __init__(self, title): self.title = title return # 然后定义函数, 通过 module.function() 调用 def testbook(): &#34;testing testing...&#34; title = &#34;How to test Py&#34; book = bookClass(title) print(&#34;Tested the book&#34;) # 如果模块运行, 这儿的代码将被执行 if __name__ == &#39;__main__&#39;: testBook()", 
            "tags": "Python", 
            "loc": "http://littlecaptain.net/lean-pythonchapter-01.html"
        },
        {
            "title": "Hello Blog", 
            "text":"拿来说说 在各路网络资料的帮助下，我的个人 Blog 终于搭建起来了。 用到了什么 Pelican 简单易用 github page 方便, github 仓库直接管理", 
            "tags": "杂谈", 
            "loc": "http://littlecaptain.net/hello-blog.html"
        }        
    ]
}